{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/AfterimageShader.js", "../../three/examples/jsm/postprocessing/AfterimagePass.js"],
  "sourcesContent": ["/** @module AfterimageShader */\n\n/**\n * Inspired by [Three.js FBO motion trails]{@link https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst AfterimageShader = {\n\n\tname: 'AfterimageShader',\n\n\tuniforms: {\n\n\t\t'damp': { value: 0.96 },\n\t\t'tOld': { value: null },\n\t\t'tNew': { value: null }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float damp;\n\n\t\tuniform sampler2D tOld;\n\t\tuniform sampler2D tNew;\n\n\t\tvarying vec2 vUv;\n\n\t\tvec4 when_gt( vec4 x, float y ) {\n\n\t\t\treturn max( sign( x - y ), 0.0 );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 texelOld = texture2D( tOld, vUv );\n\t\t\tvec4 texelNew = texture2D( tNew, vUv );\n\n\t\t\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\n\t\t\tgl_FragColor = max(texelNew, texelOld);\n\n\t\t}`\n\n};\n\nexport { AfterimageShader };\n", "import {\n\tHalfFloatType,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\n/**\n * Pass for a basic after image effect.\n *\n * ```js\n * const afterimagePass = new AfterimagePass( 0.9 );\n * composer.addPass( afterimagePass );\n * ```\n *\n * @augments Pass\n */\nclass AfterimagePass extends Pass {\n\n\t/**\n\t * Constructs a new after image pass.\n\t *\n\t * @param {number} [damp=0.96] - The damping intensity. A higher value means a stronger after image effect.\n\t */\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `damp` value at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.damp.value = 0.9;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( AfterimageShader.uniforms );\n\n\t\tthis.uniforms[ 'damp' ].value = damp;\n\n\t\t/**\n\t\t * The composition material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.compFsMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: AfterimageShader.vertexShader,\n\t\t\tfragmentShader: AfterimageShader.fragmentShader\n\n\t\t} );\n\n\t\t/**\n\t\t * The copy material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.copyFsMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._compFsQuad = new FullScreenQuad( this.compFsMaterial );\n\t\tthis._copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\n\n\t}\n\n\t/**\n\t * Performs the after image pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this._textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this._textureComp );\n\t\tthis._compFsQuad.render( renderer );\n\n\t\tthis._copyFsQuad.material.uniforms.tDiffuse.value = this._textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this._textureOld;\n\t\tthis._textureOld = this._textureComp;\n\t\tthis._textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._textureComp.setSize( width, height );\n\t\tthis._textureOld.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._textureComp.dispose();\n\t\tthis._textureOld.dispose();\n\n\t\tthis.compFsMaterial.dispose();\n\t\tthis.copyFsMaterial.dispose();\n\n\t\tthis._compFsQuad.dispose();\n\t\tthis._copyFsQuad.dispose();\n\n\t}\n\n}\n\nexport { AfterimagePass };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAQA,IAAM,mBAAmB;AAAA,EAExB,MAAM;AAAA,EAEN,UAAU;AAAA,IAET,QAAQ,EAAE,OAAO,KAAK;AAAA,IACtB,QAAQ,EAAE,OAAO,KAAK;AAAA,IACtB,QAAQ,EAAE,OAAO,KAAK;AAAA,EAEvB;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B3B;;;ACnCA,IAAM,iBAAN,cAA6B,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjC,YAAa,OAAO,MAAO;AAE1B,UAAM;AAWN,SAAK,WAAW,cAAc,MAAO,iBAAiB,QAAS;AAE/D,SAAK,SAAU,MAAO,EAAE,QAAQ;AAOhC,SAAK,iBAAiB,IAAI,eAAgB;AAAA,MAEzC,UAAU,KAAK;AAAA,MACf,cAAc,iBAAiB;AAAA,MAC/B,gBAAgB,iBAAiB;AAAA,IAElC,CAAE;AAOF,SAAK,iBAAiB,IAAI,eAAgB;AAAA,MACzC,UAAU,cAAc,MAAO,WAAW,QAAS;AAAA,MACnD,cAAc,WAAW;AAAA,MACzB,gBAAgB,WAAW;AAAA,MAC3B,UAAU;AAAA,MACV,WAAW;AAAA,MACX,YAAY;AAAA,IACb,CAAE;AAIF,SAAK,eAAe,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MACjF,WAAW;AAAA,MACX,MAAM;AAAA,IACP,CAAE;AAEF,SAAK,cAAc,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MAChF,WAAW;AAAA,MACX,MAAM;AAAA,IACP,CAAE;AAEF,SAAK,cAAc,IAAI,eAAgB,KAAK,cAAe;AAC3D,SAAK,cAAc,IAAI,eAAgB,KAAK,cAAe;AAAA,EAE5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAQ,UAAU,aAAa,YAAwC;AAEtE,SAAK,SAAU,MAAO,EAAE,QAAQ,KAAK,YAAY;AACjD,SAAK,SAAU,MAAO,EAAE,QAAQ,WAAW;AAE3C,aAAS,gBAAiB,KAAK,YAAa;AAC5C,SAAK,YAAY,OAAQ,QAAS;AAElC,SAAK,YAAY,SAAS,SAAS,SAAS,QAAQ,KAAK,aAAa;AAEtE,QAAK,KAAK,gBAAiB;AAE1B,eAAS,gBAAiB,IAAK;AAC/B,WAAK,YAAY,OAAQ,QAAS;AAAA,IAEnC,OAAO;AAEN,eAAS,gBAAiB,WAAY;AAEtC,UAAK,KAAK,MAAQ,UAAS,MAAM;AAEjC,WAAK,YAAY,OAAQ,QAAS;AAAA,IAEnC;AAGA,UAAM,OAAO,KAAK;AAClB,SAAK,cAAc,KAAK;AACxB,SAAK,eAAe;AAAA,EAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAS,OAAO,QAAS;AAExB,SAAK,aAAa,QAAS,OAAO,MAAO;AACzC,SAAK,YAAY,QAAS,OAAO,MAAO;AAAA,EAEzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AAET,SAAK,aAAa,QAAQ;AAC1B,SAAK,YAAY,QAAQ;AAEzB,SAAK,eAAe,QAAQ;AAC5B,SAAK,eAAe,QAAQ;AAE5B,SAAK,YAAY,QAAQ;AACzB,SAAK,YAAY,QAAQ;AAAA,EAE1B;AAED;",
  "names": []
}
